// import-bible-data.js
import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { readFileSync, existsSync } from 'fs';

// Configuration du chemin pour ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Charger les variables d'environnement depuis le fichier .env
config({ path: join(__dirname, '../.env') });

const SUPABASE_URL = process.env.VITE_SUPABASE_URL;
const SUPABASE_SERVICE_KEY = process.env.VITE_SUPABASE_SERVICE_KEY;

// Validation des variables d'environnement
if (!SUPABASE_URL) {
    console.error('‚ùå VITE_SUPABASE_URL manquant');
    process.exit(1);
}

if (!SUPABASE_SERVICE_KEY) {
    console.error('‚ùå VITE_SUPABASE_SERVICE_KEY manquant');
    process.exit(1);
}

console.log('‚úÖ Configuration Supabase charg√©e');
console.log('URL:', SUPABASE_URL.replace(/\.co$/, '.co[...]'));
console.log('Cl√©:', SUPABASE_SERVICE_KEY.substring(0, 10) + '[...]');

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// FONCTION PRINCIPALE POUR IMPORTER LA BIBLE MALGACHE - CORRIG√âE
async function importMalagasyBible() {
    console.log('üìñ D√©but de l\'importation de la Bible malgache...');
    
    try {
        // Chemin vers le fichier combin√© malgache
        const filePath = join(__dirname, '../public/data/malagasy-bible/bible-mg.txt');
        
        if (!existsSync(filePath)) {
            throw new Error(`Fichier malgache non trouv√©: ${filePath}`);
        }

        const text = readFileSync(filePath, 'utf8');
        const booksData = parseCombinedMalagasyText(text);
        
        let totalVerses = 0;

        for (const [malagasyBookName, chapters] of Object.entries(booksData)) {
            console.log(`üìö Traitement du livre: ${malagasyBookName} (${Object.keys(chapters).length} chapitres)`);
            
            // DEBUG: V√©rification sp√©cifique pour Salamo
            if (malagasyBookName === 'Salamo') {
                console.log(`üîç Salamo - Chapitres d√©tect√©s: ${Object.keys(chapters).length}`);
                const chapterNumbers = Object.keys(chapters).map(Number).sort((a, b) => a - b);
                console.log(`üîç Salamo - Premier chapitre: ${chapterNumbers[0]}, Dernier: ${chapterNumbers[chapterNumbers.length - 1]}`);
            }
            
            for (const [chapter, verses] of Object.entries(chapters)) {
                const chapterNum = parseInt(chapter);
                const verseData = Object.entries(verses).map(([verse, verseText]) => ({
                    book: malagasyBookName,
                    chapter: chapterNum,
                    verse: parseInt(verse),
                    text: verseText
                }));

                // DEBUG: Log pour les Psaumes
                if (malagasyBookName === 'Salamo' && chapterNum >= 70) {
                    console.log(`üîç Importation Salamo ${chapterNum}: ${verseData.length} versets`);
                }

                const { error } = await supabase
                    .from('malagasy_bible_verses')
                    .upsert(verseData, { onConflict: 'book,chapter,verse' });

                if (error) {
                    console.error(`‚ùå Erreur lors de l'import de ${malagasyBookName} chapitre ${chapter}:`, error);
                } else {
                    totalVerses += verseData.length;
                    if (malagasyBookName === 'Salamo' && chapterNum >= 70) {
                        console.log(`‚úÖ Salamo ${chapterNum}: ${verseData.length} versets import√©s avec succ√®s`);
                    }
                }
            }
        }

        console.log(`üìä Importation malgache termin√©e: ${totalVerses} versets au total`);
        return totalVerses;
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'importation malgache:', error);
        throw error;
    }
}

// FONCTION POUR PARSER LE TEXTE MALGACHE COMBIN√â - CORRIG√âE
function parseCombinedMalagasyText(text) {
    const books = {};
    const lines = text.split('\n');
    
    let currentBook = null;
    let currentContent = [];
    
    for (let i = 0; i < lines.length; i++) {
        let line = lines[i].trim();
        
        // D√©tection du d√©but d'un nouveau livre (format: "NomDuLivre.txt")
        const bookMatch = line.match(/^(.+)\.txt$/);
        if (bookMatch) {
            // Sauvegarder le livre pr√©c√©dent s'il existe
            if (currentBook && currentContent.length > 0) {
                books[currentBook] = parseMalagasyBookContent(currentContent.join('\n'));
                console.log(`üìñ Livre "${currentBook}" pars√©: ${Object.keys(books[currentBook]).length} chapitres`);
            }
            
            // Commencer un nouveau livre
            currentBook = bookMatch[1];
            currentContent = [];
            continue;
        }
        
        // Ajouter la ligne au contenu du livre courant
        if (currentBook && line) {
            currentContent.push(line);
        }
    }
    
    // Ne pas oublier le dernier livre
    if (currentBook && currentContent.length > 0) {
        books[currentBook] = parseMalagasyBookContent(currentContent.join('\n'));
        console.log(`üìñ Livre "${currentBook}" pars√©: ${Object.keys(books[currentBook]).length} chapitres`);
    }
    
    console.log(`üìö ${Object.keys(books).length} livres malgaches d√©tect√©s au total`);
    
    // V√©rification sp√©cifique pour Salamo
    if (books['Salamo']) {
        const salamChapters = Object.keys(books['Salamo']).map(Number).sort((a, b) => a - b);
        console.log(`üîç V√âRIFICATION SALAMO: ${salamChapters.length} chapitres d√©tect√©s`);
        console.log(`üîç SALAMO - Premier: ${salamChapters[0]}, Dernier: ${salamChapters[salamChapters.length - 1]}`);
        
        if (salamChapters.length < 150) {
            const missing = [];
            for (let i = 1; i <= 150; i++) {
                if (!salamChapters.includes(i)) missing.push(i);
            }
            console.log(`‚ùå SALAMO - Chapitres manquants dans le parsing: ${missing.join(', ')}`);
        }
    }
    
    return books;
}

// FONCTION POUR PARSER LE CONTENU D'UN LIVRE MALGACHE - CORRIG√âE
function parseMalagasyBookContent(text) {
    const chapters = {};
    const lines = text.split('\n');
    
    lines.forEach((line, index) => {
        line = line.trim();
        if (!line) return;

        // Format attendu: ¬´ texte du verset ¬ª (Livre Chapitre:Verset)
        // CORRECTION: Meilleure regex pour capturer tous les formats
        const verseMatch = line.match(/¬´\s*(.*?)\s*¬ª\s*\(([^)]+)\)/);
        if (verseMatch) {
            const verseText = verseMatch[1].trim();
            const reference = verseMatch[2];
            
            // CORRECTION: Regex am√©lior√©e pour capturer diff√©rents formats de r√©f√©rence
            const refMatch = reference.match(/(\w+)\s+(\d+):(\d+)/);
            if (refMatch) {
                const bookName = refMatch[1];
                const chapter = parseInt(refMatch[2]);
                const verse = parseInt(refMatch[3]);
                
                if (!chapters[chapter]) {
                    chapters[chapter] = {};
                }
                
                if (verseText) {
                    chapters[chapter][verse] = verseText;
                }
            }
        }
    });

    return chapters;
}

// FONCTION POUR IMPORTER LA BIBLE FRAN√áAISE
async function importFrenchBible() {
    console.log('üìñ D√©but de l\'importation de la Bible fran√ßaise...');
    
    try {
        const filePath = join(__dirname, '../public/data/french-bible/bible-fr.txt');
        
        if (!existsSync(filePath)) {
            throw new Error(`Fichier fran√ßais non trouv√©: ${filePath}`);
        }

        const text = readFileSync(filePath, 'utf8');
        const booksData = parseFrenchBibleText(text);
        
        let totalVerses = 0;

        for (const [frenchBookName, chapters] of Object.entries(booksData)) {
            const malagasyBook = convertFrenchToMalagasyBookName(frenchBookName);
            if (!malagasyBook) {
                console.log(`‚ö†Ô∏è  Livre non mapp√©: ${frenchBookName}`);
                continue;
            }

            console.log(`üìö Traitement du livre: ${malagasyBook} (${frenchBookName}) - ${Object.keys(chapters).length} chapitres`);
            
            for (const [chapter, verses] of Object.entries(chapters)) {
                const verseData = Object.entries(verses).map(([verse, verseText]) => ({
                    book: malagasyBook,
                    chapter: parseInt(chapter),
                    verse: parseInt(verse),
                    text: verseText
                }));

                const { error } = await supabase
                    .from('french_bible_verses')
                    .upsert(verseData, { onConflict: 'book,chapter,verse' });

                if (error) {
                    console.error(`‚ùå Erreur lors de l'import de ${malagasyBook} chapitre ${chapter}:`, error);
                } else {
                    totalVerses += verseData.length;
                }
            }
        }

        console.log(`üìä Importation fran√ßaise termin√©e: ${totalVerses} versets au total`);
        return totalVerses;
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'importation fran√ßaise:', error);
        throw error;
    }
}

// FONCTION POUR PARSER LE TEXTE FRAN√áAIS
function parseFrenchBibleText(text) {
    const books = {};
    const lines = text.split('\n');
    
    let currentBook = null;
    let currentChapter = null;
    let currentVerse = null;
    let currentText = '';
    
    for (let i = 0; i < lines.length; i++) {
        let line = lines[i].trim();
        if (!line) continue;

        const bookMatch = detectBookName(line);
        if (bookMatch) {
            if (currentBook && currentChapter !== null && currentVerse !== null && currentText) {
                saveVerse(books, currentBook, currentChapter, currentVerse, currentText);
                currentText = '';
            }
            
            currentBook = bookMatch;
            currentChapter = null;
            currentVerse = null;
            if (!books[currentBook]) {
                books[currentBook] = {};
            }
            continue;
        }

        let chapterMatch = line.match(/^Chapitre\s+(\d+)/i);
        if (!chapterMatch) {
            chapterMatch = line.match(/^Psaume\s+(\d+)/i);
        }
        if (chapterMatch) {
            if (currentBook && currentChapter !== null && currentVerse !== null && currentText) {
                saveVerse(books, currentBook, currentChapter, currentVerse, currentText);
                currentText = '';
            }
            
            currentChapter = parseInt(chapterMatch[1]);
            currentVerse = null;
            if (!books[currentBook][currentChapter]) {
                books[currentBook][currentChapter] = {};
            }
            continue;
        }

        const verseMatch = line.match(/^(\d+)\s*(¬∂)?\s*(.*)$/);
        if (verseMatch && currentBook && currentChapter !== null) {
            if (currentVerse !== null && currentText) {
                saveVerse(books, currentBook, currentChapter, currentVerse, currentText);
                currentText = '';
            }
            
            currentVerse = parseInt(verseMatch[1]);
            currentText = verseMatch[3].trim();
        } else if (currentBook && currentChapter !== null && currentVerse !== null && line) {
            if (currentText) currentText += ' ';
            currentText += line;
        }
    }

    if (currentBook && currentChapter !== null && currentVerse !== null && currentText) {
        saveVerse(books, currentBook, currentChapter, currentVerse, currentText);
    }

    console.log(`üìö ${Object.keys(books).length} livres fran√ßais d√©tect√©s`);
    return books;
}

// FONCTION POUR D√âTECTER LES NOMS DE LIVRES
function detectBookName(line) {
    const bookNames = [
        "Gen√®se", "Exode", "L√©vitique", "Nombres", "Deut√©ronome", "Josu√©", "Juges", "Ruth",
        "1 Samuel", "2 Samuel", "1 Rois", "2 Rois", "1 Chroniques", "2 Chroniques", "Esdras", "N√©h√©mie",
        "Esther", "Job", "Psaume", "Proverbes", "Eccl√©siaste", "Cantique des Cantiques", "√âsa√Øe", "J√©r√©mie",
        "Lamentations", "√âz√©chiel", "Daniel", "Os√©e", "Jo√´l", "Amos", "Abdias", "Jonas", "Mich√©e", "Nahum",
        "Habacuc", "Sophonie", "Agg√©e", "Zacharie", "Malachie", "Matthieu", "Marc", "Luc", "Jean", 
        "Actes", "Romains", "1 Corinthiens", "2 Corinthiens", "Galates", "√âph√©siens", "Philippiens", 
        "Colossiens", "1 Thessaloniciens", "2 Thessaloniciens", "1 Timoth√©e", "2 Timoth√©e", "Tite", 
        "Phil√©mon", "H√©breux", "Jacques", "1 Pierre", "2 Pierre", "1 Jean", "2 Jean", "3 Jean", "Jude", "Apocalypse"
    ];

    for (const bookName of bookNames) {
        if (line === bookName) {
            return bookName;
        }
    }
    return null;
}

// FONCTION POUR SAUVEGARDER UN VERSET
function saveVerse(books, book, chapter, verse, text) {
    if (!books[book][chapter]) {
        books[book][chapter] = {};
    }
    books[book][chapter][verse] = text.replace(/\s+/g, ' ').trim();
}

// FONCTION POUR CONVERTIR LES NOMS DE LIVRES FRAN√áAIS EN MALGACHE
function convertFrenchToMalagasyBookName(frenchName) {
    const mapping = {
        "Gen√®se": "Genesisy", "Exode": "Eksodosy", "L√©vitique": "Levitikosy", "Nombres": "Nomery",
        "Deut√©ronome": "Deotoronomia", "Josu√©": "Josoa", "Juges": "Mpitsara", "Ruth": "Rota",
        "1 Samuel": "I Samoela", "2 Samuel": "II Samoela", "1 Rois": "I Mpanjaka", "2 Rois": "II Mpanjaka",
        "1 Chroniques": "I Tantara", "2 Chroniques": "II Tantara", "Esdras": "Ezra", "N√©h√©mie": "Nehemia",
        "Esther": "Estera", "Job": "Joba", "Psaume": "Salamo", "Proverbes": "Ohabolana",
        "Eccl√©siaste": "Mpitoriteny", "Cantique des Cantiques": "Tonon-kiran'i Solomona",
        "√âsa√Øe": "Isaia", "J√©r√©mie": "Jeremia", "Lamentations": "Fitomaniana", "√âz√©chiel": "Ezekiela",
        "Daniel": "Daniela", "Os√©e": "Hosea", "Jo√´l": "Joela", "Amos": "Amosa", "Abdias": "Obadia",
        "Jonas": "Jona", "Mich√©e": "Mika", "Nahum": "Nahoma", "Habacuc": "Habakoka", "Sophonie": "Zefania",
        "Agg√©e": "Hagay", "Zacharie": "Zakaria", "Malachie": "Malakia", "Matthieu": "Matio",
        "Marc": "Marka", "Luc": "Lioka", "Jean": "Jaona", "Actes": "Asan'ny Apostoly", "Romains": "Romana",
        "1 Corinthiens": "I Korintiana", "2 Corinthiens": "II Korintiana", "Galates": "Galatiana",
        "√âph√©siens": "Efesiana", "Philippiens": "Filipiana", "Colossiens": "Kolosiana",
        "1 Thessaloniciens": "I Tesaloniana", "2 Thessaloniciens": "II Tesaloniana",
        "1 Timoth√©e": "I Timoty", "2 Timoth√©e": "II Timoty", "Tite": "Titosy", "Phil√©mon": "Filemona",
        "H√©breux": "Hebreo", "Jacques": "Jakoba", "1 Pierre": "I Petera", "2 Pierre": "II Petera",
        "1 Jean": "I Jaona", "2 Jean": "II Jaona", "3 Jean": "III Jaona", "Jude": "Joda", "Apocalypse": "Apokalipsy"
    };
    
    return mapping[frenchName];
}

// FONCTION PRINCIPALE D'IMPORTATION
async function main() {
    try {
        console.log('üöÄ D√©but de l\'importation des donn√©es bibliques...');
        
        // Option: Vider les tables existantes avant de r√©importer
        console.log('üßπ Nettoyage des tables existantes...');
        const { error: deleteMgError } = await supabase.from('malagasy_bible_verses').delete().neq('book', 'dummy');
        if (deleteMgError) console.log('Note: Impossible de vider la table malgache existante');
        
        const { error: deleteFrError } = await supabase.from('french_bible_verses').delete().neq('book', 'dummy');
        if (deleteFrError) console.log('Note: Impossible de vider la table fran√ßaise existante');
        
        // Importer d'abord la Bible malgache
        const malagasyVerses = await importMalagasyBible();
        
        // Puis la Bible fran√ßaise
        const frenchVerses = await importFrenchBible();
        
        console.log('üéâ Importation termin√©e avec succ√®s !');
        console.log(`üìä R√©sum√©:`);
        console.log(`   - Bible malgache: ${malagasyVerses} versets`);
        console.log(`   - Bible fran√ßaise: ${frenchVerses} versets`);
        console.log(`   - Total: ${malagasyVerses + frenchVerses} versets`);
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'importation:', error);
    }
}

// Ex√©cuter l'importation
main().catch(console.error);